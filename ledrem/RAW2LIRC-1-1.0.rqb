' 1.1.0 Aggiunta invertibilià segnale in ingresso.
'       Aggiunta finestrina log.
' 1.0.3 Risolto bug di funzionamento solo prima volta (avevo chiuso il file LIRC e non lo riaprivo...)
' 1.0.2 ripristinata lettura diretta valori da file (a coppie, per tener conto del segno)
' 1.0.1 Risolto bug di valori negativi ignorati
'       Cambiato algoritmo pseudobinario: ora è 1 qualunque valore >0,
'       prima era qualunque valore "abbastanza vicino" al massimo.  
'       Risolto bug di immagine non ridisegnata (refresh: disegnare su BMP, nn su IMAGE)
' 1.0.0 Prima versione pubblica
' 0.3.3 Prima versione funzionante (ma solo al primo OPEN...)
' 0.3.2 - Grafico quasi ok (almeno i valori ci sono...)
' 0.3.1 - Filtrati via valori >128
' 0.3.0 - Dati header letti da file con funzione built-in

$typecheck on
$INCLUDE <Rapidq2.inc>
$option explicit

const CAPTION = "RAW-audio to LIRC converter " 
const VERSION = "1.1.0"

dim _debug as qfilestream

dim FileDialog as QFileDialog

declare sub paint
  
declare sub move(x as integer,y as integer)
declare sub start(bt as integer,x as integer,y as integer)
declare sub start2
declare sub InitLIRC
declare function ASCII2DEC(s as string, L as integer) as integer
declare function ASCII2HEX(s as string, L as integer) as string
declare function ExamineWav(CommandName as string) as integer
declare sub AppendLog (s as string)

declare  sub OpenFiles
declare sub ShowAbout
declare sub ToggleInvert
declare sub CloseForm

const PLOT = 1
const CREATE_LIRC = 2
const VALUES_PER_LINE = 6
'const FREQ = 44.1
const ERR_BAD_FORMAT = 2 
const FATAL_ERROR = 99


'dim CommandName as string
dim PATH as string
dim TypeDraw as integer
TypeDraw=1
dim flag as integer
dim orx as integer
dim ory as integer
dim ox as integer
dim oy as integer
dim pencolor as long
dim backcolor as long
dim Dial as QColorDialog
dim Header as string
dim Footer as string
dim LIRCFile as qfilestream
dim LIRCFileName as string
dim CRLF as string
dim DeviceName as string
dim Action as integer
dim DATALEN as integer
dim DataSize as long
dim Sign as integer
dim FREQ as long
    DefInt WavChannels, WavFreq,WavBytesSec,WavBytesSample,WavBitsSample


dim WavContents as string
dim RawContents as string
dim RawData(64000) as integer

dim InputFileName(100) as string
dim InputFilesCount as integer
dim InputFilesFolder as string


CRLF = chr$(13) & chr$(10)
DATALEN = 2
sign = 1

Action = CREATE_LIRC

'CommandName = "spegni-dvdp2"
PATH = "F:\documenti\testo\geocities\p800sito\altervista\LedRem"
LIRCFileName = curdir$ & "\Provalirc.conf"
DeviceName = "DispositivoDiProva"

CREATE Form AS QFORM
    Width = 750
    Height= 400
    Center  
    caption = CAPTION & " " & VERSION
    BorderStyle =bsSingle
    CREATE image AS qcanvas
        align = alclient
        onpaint = paint
    END CREATE  
    create MainMenu as QMainMenu
        create mnFile as QMenuItem
            caption = "File"
            create mnOpen as qMenuItem
                caption = "Open..."
                onclick = OpenFiles
            end create
            create mnExit as qMenuItem
                caption = "Exit"
                onclick = CloseForm
            end create
        end create        
        create mnOptions as QMenuItem
            caption = "Options"
            create mnInverted as qMenuItem
                caption = "Inverted signal"
                onclick = ToggleInvert
            end create
        end create        
        create mnHelp as QMenuItem
            caption = "Help"
            create mnAbout as qMenuItem
                caption = "About"
                onclick = ShowAbout
            end create
        end create        
    end create
    create txtLog as qrichedit
        top = 0
        left = 600
        width = 140
        height = 340
        readonly = 1
        hidescrollbars = 0
        ScrollBars = 2
    end create
  CREATE StatusBar AS QStatusBar
  sizegrip = 0
  end create    
END CREATE

CREATE bmp AS QBITMAP
    width = 600
    height = 400
END CREATE

call InitLIRC

Form.ShowModal


SUB paint
    image.draw(0,0,bmp.bmp)
END SUB

sub ProcessData
    Dim word As Integer
    Dim raw(10000) as integer
    dim binary(10000) As Integer
    DefLng Max, Min, tolerance, One, Zero 
    Dim NumVals As Integer
    Dim BurstLength(100) As Long
    Dim Length As Long
    dim i as integer
    dim PrevVal as long
    dim printed as integer
    dim c as long
    dim T as string
    dim ToSkip as long
    dim x as long
    dim factor as integer
        
    factor = 1000    
    'tolerance = 60 ' %
    One = 50
    Zero = 0
    Max = 0
    Min = 0
    ToSkip = 4
    FREQ = WavFreq/1000
    
    for i = 1 to DataSize/2
        if  RawData(i)<min then min = RawData(i)
        if  RawData(i)>max then max = RawData(i)
    next
    
  
'_debug.open("fuori.txt",fmCreate) 

    bmp.FillRect(0,0,image.Width,image.height,clWhite) ' Clear image
    AppendLog("Plotting graph" ) : doevents 
    ' *************** Plot raw graph
    For i = 45 To DataSize/2 step ToSkip
        bmp.line(int(i/ToSkip),100-RawData(i-ToSkip)/factor,int(i/ToSkip),100-RawData(i)/factor,0)  
    next  
    bmp.line(0,100,600,100,&h999999)
    call Paint
    AppendLog("Done." ) : doevents 

    ' ************* Convert to pseudo-binary
    AppendLog("Converting to binary... " ) : doevents    
    c = 0
    x = 0
    For i = 1 To DataSize/2
        c = c + 1
        x = x + 1
        binary(i) = 0
        If RawData(i) > Max/10 then ' Max - (Max * tolerance / 100) Then
            binary(i) = One      
        End If
'        _debug.writeline( str$(i) &  "," & str$(binary(i)))
        'print rawdata(i),",",binary(i)
        statusbar.simpletext= "Converting... " & str$(rawdata(i))

    Next
    AppendLog("Done." ) : doevents    
'    _debug.close
   
   ' Plot pseudobinary graph
   AppendLog("Plotting binary..." ) : doevents  
    For i = 45 To DataSize/2 step ToSkip 
        bmp.line(int(i/ToSkip),250,int(i/ToSkip),250-Binary(i),0) 
    next  
    call Paint
    AppendLog("Done." ) : doevents  

    ' ************* Count occurrences
    AppendLog("Counting... ")  : doevents 
    PrevVal = binary(1)
    Length = 0
    NumVals = 0
    For i = 1 To DataSize/2
        If binary(i) = PrevVal Then
            Length = Length + 1
        Else
            if length > 0 then 
                NumVals = NumVals + 1
                BurstLength(NumVals) = Length
                'Print Length,",", Str$(Length / (FREQ*1000))
            end if
            Length = 0
        End If
        PrevVal = binary(i)
        statusbar.simpletext= "Counting... " & str$(int(100*i/(datasize/2))) &  "%"
    Next   
    AppendLog("Done." ) : doevents  
    
    ' ************ Write LIRC file
    AppendLog("Writing LIRC file..." ) : doevents  
    printed = 0
    For i = 1 To NumVals 
        If printed < VALUES_PER_LINE Then
            if printed = 0 then LIRCFile.write("              ") 
            LIRCFile.write(str$(int(1000000*BurstLength(i)/(FREQ*1000))) & "     ")
            printed = printed + 1
        Else
            LIRCFile.writeline(str$(int(1000000*BurstLength(i)/(FREQ*1000))))
            printed = 0
        End If    
        statusbar.simpletext= "Writing... " & str$(int(100*i/(Numvals))) &  "%"
    Next
      LIRCFile.writeline("              " & str$(int(1000000*10*BurstLength(i-1)/(FREQ*1000))))
       LIRCFile.writeline()
    AppendLog("Done." ) : doevents  
end sub

sub InitLIRC
    header = ""    
    header = header & _
    "#" & CRLF & _
    "# This config file was automatically created by RAW2LIRC" & CRLF & _
    "# starting from a WAV sample." & CRLF & _
    "#" & CRLF & _
    "# Brand:" & CRLF & _
    "# Model:" & CRLF & _
    "# devices being controlled by this remote:" & CRLF & _
    "#" & CRLF & _
    "" & CRLF & _
    "begin remote" & CRLF & _
    "  name	#DeviceName#"  & CRLF & _
    "  flags	flags RAW_CODES|CONST_LENGTH" & CRLF & _
    "  eps	30" & CRLF & _
    "  aeps	100" & CRLF & _
    "" & CRLF & _
    "  ptrail          0" & CRLF & _
    "  repeat     0     0" & CRLF & _
    "  gap    150061" & CRLF & _
    "" & CRLF & _
    "     begin raw_codes"  & CRLF & _
     ""
   
    footer = "      end raw_codes" & CRLF & _
             "end remote"
end sub

function ASCII2HEX(s as string, L as integer) as string
    select case L
        case 1
            ASCII2HEX = hex$(asc(mid$(s,1,1)))
            exit function
        case 2    
            ASCII2HEX = hex$(asc(mid$(s,1,1))+asc(mid$(s,2,1))*256)
            exit function
        case 4
            ASCII2HEX = hex$(asc(mid$(s,1,1)) + asc(mid$(s,2,1))*256 + asc(mid$(s,3,1))*256*256 + asc(mid$(s,3,1))*256*256*256)
            exit function
    end select
end function

function ASCII2DEC(s as string, L as integer) as integer
    select case L
        case 1
            ASCII2DEC = (asc(mid$(s,1,1)))
            exit function
        case 2
            ASCII2DEC = (asc(mid$(s,1,1))+asc(mid$(s,2,1))*256)
            exit function
        case 4
            ASCII2DEC = (asc(mid$(s,1,1)) + asc(mid$(s,2,1))*256 + asc(mid$(s,3,1))*256*256 + asc(mid$(s,4,1))*256*256*256)
            exit function
    end select
end function

function ExamineWav(CommandName as string) as integer
    dim wav as qfilestream

    dim FormatStart as long
    dim DataStart as long
    dim c as long

    dim i as long
    dim WavHeader as string
    
    wav.open( CommandName & ".wav",fmOpenRead)
    WavHeader = wav.readbinstr(wav.size)   
'_debug.open("header.txt",fmCreate)
'_debug.writeline(wavheader)
'_debug.close    
    FormatStart = instr(WavHeader,"fmt")-1
    wav.seek(FormatStart+10,0)
    WavChannels=wav.readnum(2)
    AppendLog( "chan=" & str$(WavChannels))
    wav.seek(FormatStart+12,0)
    WavFreq = wav.readnum(4)
    AppendLog(  "freq= " & str$(WavFreq))
    wav.seek(FormatStart+16,0)
    WavBytesSec=wav.readnum(4)
    AppendLog(  "bytes= " & str$(WavBytesSec))
    wav.seek(FormatStart+10,0)
    WavBytesSample=wav.readnum(2)
    AppendLog(  "Bytes/sample= " & str$(WavBytesSample))
    DATALEN = ASCII2DEC(mid$(WavHeader,FormatStart+20,2),2)
    wav.seek(FormatStart+22,0)
    WavBitsSample=wav.readnum(2)
    AppendLog(  "bits= " & str$(WavBitsSample))
    DataStart = instr(WavHeader,"data")-1
    AppendLog(  "Datastart=" & str$(datastart))
    wav.seek(DataStart+4,0)
    DataSize =  hex$(wav.readnum(4))
    print "Lunghezza Data Chunk = 0x" & DataSize
    if WavChannels<>1  or WavBitsSample <> 16 then
        showmessage("File " & CommandName & ".wav has wrong format and will be ignored." & Chr$(13) & chr$(10) & _
        "Please select only files with 1 channel, 16 bit (this file is " & str$(WavChannels) & ", " &  str$(WavBitsSample) & ")")
        ExamineWav = ERR_BAD_FORMAT
        exit function
    end if
    print "Leggo " , DataSize, " dati RAW..."
    _debug.open("dentro.txt",fmCreate)
    c = 0
    for i = 45 to DataSize step 2
        c = c + 1
      '  if asc(mid$(WavHeader,i+1,1))<128 then ' Spurious values if > 0x80 (???)
           ' rawdata(c)=asc(mid$(WavHeader,i,1))+256*asc(mid$(WavHeader,i+1,1))
           rawdata(c)=(sign)*wav.Readnum(2)
        _debug.writeline( ".0x" & hex$(i)  & "-0x" & convbase$(str$(rawdata(c)),10,16) & " - " & str$(rawdata(c)))
           ' if (rawdata(c) and 32768) = 32768 then rawdata(c) =  -(rawdata(c) and 32767 )
       ' else
        '    rawdata(c)=asc(mid$(WavHeader,i,1))
        '_debug.writeline( ".0x" & hex$(i)  & "-0x" & mid$(hex$(asc(mid$(WavHeader,i,1))),5,4) & ","  & mid$(hex$(asc(mid$(WavHeader,i+1,1))),5,4) & chr$(9) & str$(asc(mid$(WavHeader,i,1))))
        'end if
        '_debug.writeline(str$(c) & "," &  str$(rawdata(c)))
    next
    _debug.close
    wav.close
    ExamineWav = 0
end function


sub OpenFiles
dim i as integer
dim res as integer
    Filedialog.Caption = "Select files to convert"
    FileDialog.Filter = "Audio files (*.wav)|*.wav|All files (*.*)|*.*"
    FileDialog.mode = fdOpen
    FileDialog.MultiSelect = 1
     if FileDialog.execute then
         for i = 0 to FileDialog.SelCount
            InputFileName(i)= mid$(FileDialog.Files(i),1,instr(FileDialog.Files(i),".")-1)
         next i
         InputFilesCount = FileDialog.SelCount
         InputFilesFolder = FileDialog.Files(0)
         
        LIRCFile.open(LIRCFileName, fmCreate)
        LIRCFile.writeline(replacesubstr$(header,"#DeviceName#",DeviceName))
         
         txtLog.text = ""
         
         for i = 1 to InputFilesCount    
            AppendLog("### Processing file " & InputFileName(i))      
            res =  ExamineWav(InputFilesFolder  & InputFileName(i))
            if res = FATAL_ERROR then exit for            
            if res=0 then
                LIRCFile.writeline("        name " & InputFileName(i))                   
                call ProcessData            
                form.caption = CAPTION & "  " & VERSION & " - [" & InputFileName(i) & ".wav"
                if sign = -1 then form.caption = form.caption & " (inverted)]" else form.caption = form.caption & "]" : doevents
            end if            
         next     
         LIRCFile.writeline(footer)
         LIRCFile.close        
         AppendLog("LIRC file: " & LIRCFileName)
         if res = 0 then
            showmessage("Done.")
         else
            showmessage("Some errors occurred during processing.")
         end if  
     end if
end sub

sub SelectOutput
    FileDialog.caption = "Save sto LIRC configuration file"
    FileDialog.Filter = "LIRC files (*.conf)|*.conf|Text files (*.txt)|*.txt|All files (*.*)|*.*"
    if FileDialog.execute then
        LIRCFileName = FileDialog.FileName
    end if
end sub

sub ShowAbout
dim msg as string
msg = ""
msg = msg & "RAW to LIRC converter " & VERSION & Chr$(13) & Chr$(10)
msg = msg & "" & Chr$(13) & Chr$(10)
msg = msg & "This programs takes as input a WAVE file resulting from sampling" & Chr$(13) & Chr$(10)
msg = msg & "a remote control using a TRANSMITTING LED connected to microphone" & Chr$(13) & Chr$(10)
msg = msg & "input of PC audio card and produces a LIRC configuration file" & Chr$(13) & Chr$(10)
msg = msg & "containing RAW codes." & Chr$(13) & Chr$(10)
msg = msg & "" & Chr$(13) & Chr$(10)
msg = msg & "WAV file must be 1 channel, 16 bit, 44100 Hz"  & Chr$(13) & Chr$(10)
msg = msg & "" & Chr$(13) & Chr$(10)
msg = msg & "Freeware by Luca Cassioli (2008)" & Chr$(13) & Chr$(10)
showmessage msg
end sub


sub ToggleInvert
    if mnInverted.checked = 0 then mnInverted.checked=1 else mnInverted.checked=0
    if sign = -1 then sign=1 else sign=-1    
    bmp.fillrect(0,0,bmp.width,bmp.height,&hffffff)
    form.caption = CAPTION & "  " & VERSION 
    call Paint 
    AppendLog("Sign is now: " & str$(sign))
end sub

sub AppendLog (s as string)
    txtLog.text = txtLog.text & s & chr$(13) & chr$(10)
end sub


sub CloseForm
 end
end sub
